// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Utils$ReactTemplate = require("./Utils.bs.js");
var Header$ReactTemplate = require("./Header.bs.js");
var DataFetcher$ReactTemplate = require("./DataFetcher.bs.js");

var component = ReasonReact.reducerComponent("GamePage");

function make(_children) {
  var getShuffledDeck = function (param) {
    return Utils$ReactTemplate.shuffle(DataFetcher$ReactTemplate.getListWords(DataFetcher$ReactTemplate.getList(DataFetcher$ReactTemplate.storedListId[0])));
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* Restart */4);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* flipped */1];
              var cardClass = "card" + (
                match ? " card--flipped" : ""
              );
              var match$1 = self[/* state */1][/* deck */2].length;
              var currentWord = match$1 !== 0 ? Caml_array.caml_array_get(self[/* state */1][/* deck */2], self[/* state */1][/* currentIdx */0]) : DataFetcher$ReactTemplate.nullWord;
              return React.createElement("div", {
                          className: "gamecontainer"
                        }, ReasonReact.element(undefined, undefined, Header$ReactTemplate.make("Words", /* array */[])), React.createElement("div", {
                              className: cardClass,
                              onMouseDown: (function (_event) {
                                  return Curry._1(self[/* send */3], /* Flip */1);
                                }),
                              onMouseUp: (function (_event) {
                                  return Curry._1(self[/* send */3], /* Unflip */2);
                                }),
                              onTouchEnd: (function (_event) {
                                  return Curry._1(self[/* send */3], /* Unflip */2);
                                }),
                              onTouchStart: (function (_event) {
                                  return Curry._1(self[/* send */3], /* Flip */1);
                                })
                            }, React.createElement("div", {
                                  className: "front"
                                }, React.createElement("span", undefined, currentWord[/* eng */2])), React.createElement("div", {
                                  className: "back"
                                }, React.createElement("span", undefined, currentWord[/* text */1]))), React.createElement("div", {
                              className: "buttons"
                            }, React.createElement("button", {
                                  className: "button button-s",
                                  onClick: (function (_event) {
                                      return ReasonReact.Router[/* push */0]("/lists");
                                    })
                                }, "Back"), self[/* state */1][/* isGameOn */3] ? React.createElement("button", {
                                    className: "button button-big button--primary",
                                    onClick: (function (_event) {
                                        return Curry._1(self[/* send */3], /* Next */0);
                                      })
                                  }, "Next") : React.createElement("button", {
                                    className: "button button-big button--primary",
                                    onClick: (function (_event) {
                                        return Curry._1(self[/* send */3], /* Restart */4);
                                      })
                                  }, "Restart")));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* currentIdx */0,
                      /* flipped */false,
                      /* deck : array */[],
                      /* isGameOn */true
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              switch (action) {
                case 0 : 
                    if (state[/* currentIdx */0] < (state[/* deck */2].length - 1 | 0)) {
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentIdx */state[/* currentIdx */0] + 1 | 0,
                                  /* flipped */state[/* flipped */1],
                                  /* deck */state[/* deck */2],
                                  /* isGameOn */state[/* isGameOn */3]
                                ]]);
                    } else {
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentIdx */0,
                                  /* flipped */state[/* flipped */1],
                                  /* deck : array */[],
                                  /* isGameOn */false
                                ]]);
                    }
                case 1 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* currentIdx */state[/* currentIdx */0],
                                /* flipped */true,
                                /* deck */state[/* deck */2],
                                /* isGameOn */state[/* isGameOn */3]
                              ]]);
                case 2 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* currentIdx */state[/* currentIdx */0],
                                /* flipped */false,
                                /* deck */state[/* deck */2],
                                /* isGameOn */state[/* isGameOn */3]
                              ]]);
                case 3 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* currentIdx */state[/* currentIdx */0],
                                /* flipped */state[/* flipped */1],
                                /* deck */getShuffledDeck(/* () */0),
                                /* isGameOn */state[/* isGameOn */3]
                              ]]);
                case 4 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* currentIdx */state[/* currentIdx */0],
                                /* flipped */state[/* flipped */1],
                                /* deck */getShuffledDeck(/* () */0),
                                /* isGameOn */true
                              ]]);
                
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
